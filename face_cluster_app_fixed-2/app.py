
import streamlit as st
from core.cluster import build_plan, IMG_EXTS
from pathlib import Path
import shutil
import json
import numpy as np

st.title("Face Clustering App")

input_dir = st.text_input("üìÇ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ", value="photos")
run = st.button("üîç –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å –ª–∏—Ü–∞")

if run:
    path = Path(input_dir)
    if not path.exists():
        st.error("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        st.stop()

    st.write("üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    plan = build_plan(path)

    clustered_paths = set()
    st.write("üìÅ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º...")
    for item in plan:
        dst_dir = path / f"cluster_{item['cluster']}"
        dst_dir.mkdir(exist_ok=True)
        dst_path = dst_dir / item["path"].name
        shutil.copy(item["path"], dst_path)
        clustered_paths.add(item["path"].resolve())

    # –£–¥–∞–ª—è–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
    st.write("üßπ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ...")
    for p in clustered_paths:
        try:
            p.unlink()
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {p.name}: {e}")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    def convert_json_safe(obj):
        if isinstance(obj, dict):
            return {k: convert_json_safe(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [convert_json_safe(i) for i in obj]
        elif isinstance(obj, Path):
            return str(obj)
        elif isinstance(obj, (np.integer, np.int32, np.int64)):
            return int(obj)
        elif isinstance(obj, (np.floating, np.float32, np.float64)):
            return float(obj)
        elif isinstance(obj, (np.bool_)):
            return bool(obj)
        elif isinstance(obj, (np.ndarray, set, tuple)):
            return [convert_json_safe(i) for i in obj]
        else:
            return obj

    with open("plan.json", "w", encoding="utf-8") as f:
        json.dump(convert_json_safe(plan), f, ensure_ascii=False, indent=2)

    st.success(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(set(item['cluster'] for item in plan))}")
